; Sydney Lo
; Tetris
; ECS 50 Summer 2014

; Mini os
	.equ put_num,	$e00
	.equ	get_num,	$e01
	.equ	get_str,	$e04
	.equ	put_str,	$e05
	.equ	put_nl,	$e06
	.equ	put_num2,	$e07
	.equ	put_chr,	$e08

; ISR Jump Table
	.equ	key_isr,	$FF8
	.equ	print_isr,	$FF9
	.equ	tape_isr,	$FFA
	.equ	timer_isr,	$FFB

; Keyboard
	.equ	kbd_cntl,	$000
	.equ	kbd_stat,	$000
	.equ	kbd_data,	$001
	.equ	kbd_flush,	$40

; Timer
	.equ	tim_cntl,	$030
	.equ	tim_stat,	$030
	.equ	tim_value,	$031
	.equ	tim_count,	$034
; Actions for keyboard and timer
	.equ	ena_int,	$80
	.equ	res_ready_bit,	$40
	.equ	strt_aft_ld,	$10
	.equ	ena_res_and_strt,	$D0
	.equ	ena_and_res,	$C0

; CRT	; char crt[14][38]
	.equ	crt_buffer,	$100
	.equ	crt_bot_rgt,	$313
	.equ	crt_xreg,	$314
	.equ	crt_yreg,	$315
	.equ	crt_cntl,	$316
	.equ	crt_data,	$317
	.equ	crt_rows,	14
	.equ	crt_cols,	38
	.equ	crt_clr_dis,	$01
	.equ	crt_home,	$04

; Game Logistics
	.equ	top,	0	; const int top;
	.equ	bottom,	13	; const int bottom;
	.equ	max_right,	37	; const int max_right;
	.equ	left_arrow,	'K'	; const int left
	.equ	right_arrow,	'M'
	.equ	up_arrow,	'H'
	.equ	down_arrow,	'P'
	.equ	left,	0	; const int left;
	.equ	right,	1	; const int right;
	.equ	quit,	'x' 	; const int quit string(x)
	.equ	start,	13	; const int start = string(\n)
	.equ	nokey,	'n'	; const int nokey;
	.equ	patternaddr,	0	; int patterns?
	.equ	rotation,	1
	.equ	location,	2

; Misc
	.equ stackTop,	$e00

; User Constants

; Main
	lds#	stackTop
	psh#	speedPromptLen
	psh#	speedPrompt
	jsr	put_str
	ads#	2
	jsr	get_num
	sta	speed
	psh#	seedPromptLen
	psh#	seedPrompt
	jsr	put_str	; printf("Seed: ");
	ads#	2	
	jsr	get_num	; scanf("%d", &seed);
	sta	seed
	lda#	crt_clr_dis	; Clear the display
	outb	crt_cntl
	jsr	showIntro
	psh	score
	psh#	tetroPattern
	jsr	startNewScreen
	ads#	2
main:	jmp	main	; Main nop loop
	hlt	; for testing purposes

; Notes: Prints out the description of the game 
; and instructions on starting the game.
; Loops forever until the "enter" key is pressed.
; Programmers note: I may need to remove the loop until the enter key is pressed let an ISR handle it.
; void showIntro().
	.equ	key_i, 9
showIntro:	bgn#	10
	psha
	pshx
	lda#	kbd_flush
	outb	kbd_cntl
	psh#	intro1Len	; mvaddstr(0, 5, "Tetris Introduction");
	psh#	intro1
	jsr	put_str
	ads#2
	jsr	put_nl
	psh#	intro2Len	; mvaddstr(2, 0, "This is the minimal version of");
	psh#	intro2
	jsr	put_str
	ads#2
	jsr	put_nl
	psh#	intro3Len
	psh#	intro3	; mvaddstr(3, 0, "Tetris. The game starts when the");
	jsr	put_str
	ads#	2
	jsr	put_nl
	psh#	intro4Len	; mvaddstr(4, 0, "enter key is pressed. The game");
	psh#	intro4
	jsr	put_str
	ads#	2
	jsr	put_nl
	psh#	intro5Len	; mvaddstr(5, 0, "ends when the user presses x.");
	psh#	intro5
	jsr	put_str
	ads#	2
	jsr	put_nl
	psh#	intro6Len	; mvaddstr(6, 0, "Instead of this introduction, students");
	psh#	intro6	; Do not need a newline here because it is already 38 characters long.
	jsr	put_str
	ads#	2
	psh#	intro7Len	; mvaddstr(7, 0, "should place a description of their");
	psh#	intro7
	jsr	put_str
	ads#	2
	jsr put_nl
	psh#	intro8Len	; mvaddstr(8, 0, "options here.");
	psh#	intro8
	jsr	put_str
	ads#	2
	jsr	put_nl
	psh#	intro9Len	; mvaddstr(9, 0, "Press Enter to start the game.");
	psh#	intro9
	jsr	put_str
	ads#	2
	jsr	put_nl
rpLoop:	inb	kbd_stat
	jeq	rpLoop
	jsr	getKey
	sta	key_i	
	cma	enter
	jne	rpLoop	
	popx
	popa
	fin#	10
	rtn
; Notes: Gets a key from the keyboard and returns the value in the accumulator
; if it is an acceptable character. If not it returns a noKey value.
; char getKey()
	.equ	gkLocal1,	1
	.equ	gkLocal2,	0
getKey:	bgn#	2
gkLoop:	inb	kbd_stat	
	jeq	gkLoop
	inb	kbd_data	; if((key = getch()) != ERR)
	cma#	left_arrow
	jeq	gkDone
	cma#	right_arrow
	jeq	gkDone
	cma#	start
	jeq	gkDone
	cma#	up_arrow
	jeq	gkDone
	cma#	down_arrow
	jeq	gkDone
	lda#	noKey
gkDone:	fin#	2
	rtn

;int random2(int max)
;{
;  seed = (seed * 2789 + 1997) % 2048;
;  return seed % (max + 1);
;}  // random2()

; Notes:
; Programmer Notes:
; int random2(int max)
; 7 local variables
; Seed value must be between 0 and 2047
	.equ	max_i, 9
	.equ	rLocal1, 6	; multiplier
	.equ	rLocal2, 5	; increment
	.equ	rLocal3, 4	; modulus
	.equ rLocal4, 3	; seed
	.equ	rLocal5, 2
	.equ	rLocal6, 1
	.equ	rLocal7, 0
random2:	bgn#	7
	lda	seed ; seed = (seed * 2789 + 1997) % 2048)
	mul#	2789
	ada#	1997
	mod#	2048
	inc	! max_i	; seed % (max + 1)
	mod	! max_i
	fin#	7
	rtn		; return seed % (max + 1) ; in the accumulator

;void startNewScreen(int score, Tetromino *tetromino)
;{
;  int x, y
;
;  erase();  // clear screen completely
;  for(x = 0; x < 38; x++)
;    for(y = 0; y < 14; y++)
;      crt[y][x] = ' ';
;
;  mvaddstr(0,0,"------------");
;  mvaddstr(1,14, "Score:");
;  for(y = 0; y < 14; y++)
;  {
;    putChar('|', 0, y);
;    putChar('|', 11, y);
;  } // for y
;
;  mvaddstr(15,0,"------------");
;  mvaddstr(16,0,"Horizontal borders are not in CUSP");
;  showScore(score);
;  startTetromino(tetromino);
;  refresh();
;} // StartNewScreen()
; Notes:
; Programmer notes:
; void startNewScreen(int score, Tetromino *tetromino)
	.equ snsScore_i, 13
	.equ	tetromino_i, 12
	.equ snsLocal1, 9
	; local variable ...
startNewScreen:
	bgn#	10
	psha
	pshx
	lda#	crt_clr_dis	; erase()
	outb	crt_cntl	; Fills it with spaces already done.
	ldx#	0
spLoop:	lda# 16
	outb	crt_xreg
	lda#	1
	outb	crt_yreg
	psh#	scorePromptLen
	psh#	scorePrompt
	jsr	put_str
	ads#	2
spDone:	ldx#	0
snsLoop:	cmx#	14
	jeq	snsDone
	psh#	'|'	; for (y = 0; y < 14; y++) {
	psh#	1	; 	putChar("|", 0, y);
	pshx		;	putChar("|", 11, y);
	jsr	putChar	; }
	ads#	3
	psh#	'|'
	psh#	15
	pshx
	jsr	putChar
	ads#	3
	adx#	1
	jmp	snsLoop
snsDone:	psh	! snsScore_i
	jsr	showScore
	ads#	1
	psh	! tetromino_i
	jsr	startTetromino
	ads#	1
	popx
	popa
	fin#	10
	rtn
;void startTetromino(Tetromino *tetromino)
;{
;    tetromino->location = random2(5) + 1;
;    tetromino->pattern = random2(6);
;    tetromino->rotation = 0;
;    printTetromino(tetromino, 'X');
;} // startTetromino()
; Notes:
; Programmer notes:
; void startTetromino(Tetromino *tetromino)
	.equ	stTetromino,	12
	.equ	stLocal1,	9
startTetromino:
	bgn#	10
	psha
	pshx
	psh#	5	; tetromino->location = random2(5) + 1
	jsr	random2
	ads#	1
	ada#	1
	ldx#	2
	sta&	! stTetromino
	ldx#	0	; tetromino->pattern = random2(6)
	psh#	6
	jsr	random2
	ads#	1
	sta&	! stTetromino
	ldx#	1	; tetromino->rotation = 0
	lda#	0
	sta&	! stTetromino
	psh	! stTetromino
	psh#	'x'
	jsr	printTetromino
	ads#	2
	popx
	popa
	fin#	10
	rtn

;void printTetromino(const Tetromino *tetromino, char letter)
;{
;   int i, pos;
;
;   for(i = 0; i < 4; i++)
;   {
;     pos = tetromino->location + patterns[tetromino->pattern][tetromino->rotation][i];
;     putChar(letter, pos % 38, pos / 38);
;   } // for i
;}  // printTetromino()
; tetroPattern:	.word 0
; tetroRotation:	.word 1
; tetroLocation:	.word 2
; Notes:
; Programmer notes:
; void printTetromino(const Tetromino *tetromino, char letter)
	.equ	ptTetromino,	13
	.equ	ptLetter,	12
	.equ	ptLocal1,	9
	.equ	ptLocal2,	8
	.equ	ptLocal3,	7
	.equ	ptLocal4,	6
printTetromino:
	bgn#	10
	ldx#	0	;for(i = 0
ptLoopSrt:	cmx#	4
	jeq	ptLoopEnd
	pshx
	ldx#	2
	lda&	! ptTetromino	; tetromino->location
	sta	! ptLocal1		; pos = tetromino->location
	ldx#	0
	lda&	! ptTetromino		; ptLocal2 = tetroPattern ; tetroPattern is rows
	sta	! ptLocal2
	ldx#	1
	lda&	! ptTetromino	; ptLocal3 = tetroRotation ; tetroRotation is col
	sta	! ptLocal3
	popx
ptPatterns:	lda	! ptLocal2	; row addr = 16 * row
	mul#	16
	sta	! ptLocal2
	lda	! ptLocal3	; col addr = (16 * row + 4 * col)
	mul#	4
	ada	! ptLocal2
	sta	! ptLocal3
	pshx
	adx	! ptLocal3	; xr = xr = ptLocal3
	lda+	patterns	; patterns[xr]
	ada	! ptLocal1	; pos = tetromino->location + patterns[tetromino->patterns][teromino->rotation][i]
	sta	! ptLocal4
	mod#	38
	lda	! ptLocal4
	div#	38
	tax
	lda	! ptLetter
	outb+ crt_data
	popx
	adx#	1	; xr++
	jmp	ptLoopSrt	
ptLoopEnd:	fin#	10
	rtn
	
;void putChar(char c, int x, int y)
;{
;  crt[y][x] = c;
;  mvaddch(y + 1, x, c);  // allow room for top border
;  move(200,200);  // move cursor off screen
;}  // putChar()
; Notes:
; Programmer notes:
; void putChar(char c, int x, int y)
	.equ	pcC,	14
	.equ	pcX,	13
	.equ	pcY,	12
	.equ	pcLocal1,	9
	.equ	pcLocal2,	8
putChar:
	bgn#	10
	lda	! pcX
	outb	crt_xreg
	lda	! pcY
	ada#	1
	outb	crt_yreg
	lda	! pcC
	outb	crt_data
	lda#	39
	outb	crt_xreg
	lda#	15
	outb	crt_yreg
	lda#	' '
	outb	crt_data
	fin#	10
	rtn


;void showScore(int score)
;{
;  int i;
;  char str[5];
;  sprintf(str, "%04d", score);
;
;  for(i = 0; str[i]; i++)
;    putChar(str[i], i + 22, 0);  // print score
;
;  refresh();
;}  // showScore()
; void showScore(int score)
	.equ	ssScore,	12
	.equ	ssLocal1,	9
showScore:	bgn#	10
	lda#	22
	outb	crt_xreg
	lda#	1
	outb	crt_yreg
	lda	! ssScore
	jsr	put_num
	jsr	mcoffscreen
	fin#	10
	rtn

mcoffscreen:
	bgn#	0
	lda#	39
	outb	crt_xreg
	lda#	15
	outb	crt_yreg	
	fin#	0
	rtn

keyIsr:	psha
	pshx
key_status:	inb	kbd_stat
	jeq	key_status
	cma	xKey
	jeq	haltProg
haltProg:	hlt
	popx
	popa
	irtn

	
; User Variables
seed:	.word		; int seed;
seedPrompt:	.char	'Seed', seedPromptLen
speed:	.word
speedPrompt:	.char	'Speed for demo (1 = fast, 9 = slow)', speedPromptLen
scorePrompt:	.char	'Score:', scorePromptLen
score:	.word	0	; int score;
enter:	.word	$0D	; Enter key
xKey:	.word	'x'	; x
key:	.char	'n', keyLen	; char key = "n"
intro1:	.char	'Tetris Introduction', intro1Len
intro2:	.char	'This is the minimal version of', intro2Len
intro3:	.char	'Tetris. The game starts when the', intro3Len
intro4:	.char	'enter key is pressed. The game', intro4Len
intro5:	.char	'ends when the user presses x.', intro5Len
intro6:	.char	'Instead of this introduction, students', intro6Len
intro7:	.char	'should place a description of their', intro7Len
intro8:	.char	'options here.', intro8Len
intro9:	.char	'Press enter to start the game.', intro9Len
multipiler:	.word	2789
increment:	.word	1997
modulus:	.word	2048
tetroPattern:	.word
tetroRotation:	.word
tetroLocation:	.word

patterns:	.word 38	; row 1, col 1
	.word 39	
	.word  40
	.word  41
	.word 1	; row 1, col 2
	.word 39
	.word 77
	.word  115
	.word 38	; row 1, col 3
	.word 39
	.word  40
	.word  41
	.word 1	; row 1, col 4
	.word  39
	.word  77
	.word  115
    	; + 16 to hop rows, + 4 to hop columns
	.word 1	; row 2, col 1
	.word 39
	.word  40
	.word  41
	.word 1	; row 2, col 2
	.word 2
	.word 39
	.word 77
	.word 38
	.word 39
	.word 40
	.word 78 
	.word 1
	.word 39
	.word  76
	.word 77
    
	.word 2
	.word 38
	.word  39
	.word  40
	.word 1
	.word 39
	.word 77
	.word 78
	.word 38
	.word  39
	.word  40
	.word 76
	.word 0
	.word  1
	.word  39
	.word  77
    
	.word 1
	.word  2
	.word  39
	.word  40
	.word 1
	.word  2
	.word  39
	.word  40
	.word 1
	.word  2
	.word  39
	.word  40
	.word 1
	.word  2
	.word  39
	.word  40
    
	.word 1
	.word  2
	.word  38
	.word  39
	.word 1
	.word  39
	.word  40
	.word  78
	.word 1
	.word  2
	.word  38
	.word  39
	.word 1
	.word  39
	.word  40
	.word  78
    
	.word 1
	.word  38
	.word  39
	.word  40
	.word 1
	.word  39
	.word  40
	.word  77
	.word 38
	.word  39
	.word  40
	.word  77
	.word 1
	.word  38
	.word  39
	.word	77
    
	.word	0
	.word  1
	.word  39
	.word  40
	.word 2
	.word  39
	.word  40
	.word  77
	.word 0
	.word  1
	.word  39
	.word  40
	.word 2
	.word  39
	.word  40
	.word  77